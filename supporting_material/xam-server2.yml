Description: >
    Xam Yxar Server

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    myLaunchTemplateVersionNumber:
      Description: AWS::EC2::LaunchTemplate necessary version
      Type: String
      Default: 1

#[NOTE] Sub: it seems if we have LambdaFunction in our resourses then the following are equ        
# ${LambdaFunction.Arn}   ~ !GetAtt LambdaFunction.Arn
#or
# # ${LambdaFunction}   ~ !Ref LambdaFunction
#example 1
# Resource:
#   "Fn::Join": [ "", [ "arn:aws:s3::", !Ref S3Bucket, "/*" ] ]
#Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
#example2
# Name:
#   Fn::Sub:
#   - "myapp.${SubDomain}.${HostedZoneName}"
#   - HostedZoneName: !ImportValue HostedZone-zone-name
#     SubDomain: !ImportValue HostedZone-subzone-name

Resources:
#[NOTE] Security groups are specific to individual resources (EC2 servers, databases) and not to subnets.
#[NOTE] In the cloud, traffic is completely blocked,
# so you have to explicitly open ports to allow traffic in and out. This is a general networking concept.
#Ingress all incoming tcp on port 80 allowed
#Egress  all outgoing tcp on port 80 allowed
#[NOTE] ImportValue is based on the exported value at output section of another stack (template)
#VpcId-value from previous stack was called ${EnvironmentName}-VPCID and its value was !Ref VPC
#so we have to make sure the EnvironmentName value at parameter section of these 2 stack(template)
#are the same
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIpv6: ::/0
  
#Ingress all incoming tcp on port 8080 and ssh on port 22 allowed
#Egress  all outgoing tcp on all port 0-65535 allowed
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

# The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration
# that can be used by an Auto Scaling group to configure Amazon EC2 instances.         
#[NOTE] we can create key-pair from EC2 key section and download private here and public will asign to EC2 inst  
#[NOTE] we will replace with LaunchTemplate
  # WebAppLaunchConfig:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         sudo apt-get update -y
  #         sudo apt-get install apache2 -y
  #         sudo systemctl start apache2.service
  #         cd /var/www/html
  #         echo "Udacity Demo Web Server Up and Running!" > index.html
         
  #     # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
  #     # ami-08c40ec9ead489470 for us-east-1
  #     #Canonical, Ubuntu, 22.04 LTS, amd64 jammy image build on 2022-09-12
  #     ImageId: ami-08c40ec9ead489470
  #     # ToDo: Change the key-pair name, as applicable to you. 
  #     KeyName: xam-ec2-key
  #     SecurityGroups:
  #     - Ref: WebServerSecGroup
  #     InstanceType: t3.medium
  #     BlockDeviceMappings:
  #     - DeviceName: "/dev/sdk"
  #       Ebs:
  #         VolumeSize: '10'

#[NOTE] seems everthing is like AWS::AutoScaling::LaunchConfiguration
# only the shift under LaunchTemplateData
#then on AWS::AutoScaling::AutoScalingGroup add id and version of this ;inch-template under 
#new property LaunchTemplate instead of LaunchConfigurationName
  myWebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service
            cd /var/www/html
            echo "Udacity Demo Web Server Up and Running!" > index.html
          
        # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
        # ami-08c40ec9ead489470 for us-east-1
        #Canonical, Ubuntu, 22.04 LTS, amd64 jammy image build on 2022-09-12
        ImageId: ami-08c40ec9ead489470
        # ToDo: Change the key-pair name, as applicable to you. 
        KeyName: xam-ec2-key
        SecurityGroupIds:
          - !GetAtt WebServerSecGroup.GroupId
        # SecurityGroups:
        # - Ref: WebServerSecGroup
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'


#The AWS::AutoScaling::AutoScalingGroup resource defines an Amazon EC2 Auto Scaling group,
# which is a collection of Amazon EC2 instances that are treated as a logical grouping for
# the purposes of automatic scaling and management. 
#----
#AWS-Note: Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group
# using either a launch template or a launch configuration. We strongly recommend that you do not use
# launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2.
# For more information, see Amazon EC2 Auto Scaling will no longer add support for new EC2 features to Launch Configurations
#on the AWS Compute Blog.
#https://aws.amazon.com/blogs/compute/amazon-ec2-auto-scaling-will-no-longer-add-support-for-new-ec2-features-to-launch-configurations/
#AWS::EC2::LaunchTemplate
#[NOTE] servers are in Private subnet, and we need auto-scaling for them
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref myWebAppLaunchTemplate
        Version: !Ref myLaunchTemplateVersionNumber
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

#AWS::ElasticLoadBalancingV2::LoadBalancer
# Specifies an Application Load Balancer, a Network Load Balancer, or a Gateway Load Balancer.
#[NOTE] pubsebnet facing internet users, need loadbalancer here      
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

#  AWS::ElasticLoadBalancingV2::Listener
#Specifies a listener for an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.    
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

#  AWS::ElasticLoadBalancingV2::ListenerRule
#Specifies a listener rule. The listener must be associated with an Application Load Balancer.
# Each rule consists of a priority, one or more actions, and one or more conditions.    
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

#AWS::ElasticLoadBalancingV2::TargetGroup  Specifies a target group for an Application Load Balancer,
# a Network Load Balancer, or a Gateway Load Balancer. 
# so load balancer check the health first then cont, if not healty report as unhealty
# and the auto-scaler take it from there
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

#ADDING JumpBox
  JumpBox:
    Type: AWS::EC2::Instance
#    DependsOn: InternetGatewayAttachment
    Properties:
      KeyName: xam-jumpbox-key
      ImageId: ami-08c40ec9ead489470
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        Description: Jump Box
        DeviceIndex: '0'
        SubnetId:
          Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        GroupSet:
          - Ref: WebServerSecGroup


Outputs:
  WebServerSecGroup:
    Description: A reference to the created EC2
    Value: !Ref WebServerSecGroup
    Export:
      Name: !Sub ${EnvironmentName}-WebServerSecGroup